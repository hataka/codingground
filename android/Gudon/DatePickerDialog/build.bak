// Top-level build file where you can add configuration options common to all sub-projects/modules.
defaultTasks 'app:assembleDebug'

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.2'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

////////////////////////////////////////////////////////////////////////////////////
// Additional tasks
// rootproject tasks
/**
 * clean
task deleteGraphicsAssets(type: Delete) {
    delete {dir : "src", keepRoot : true }
}
 */
if (!project.tasks.findByName('clean')){ 
	//def srcFile = 'app/src/main/java/ya/' +project.name +'/' + project.name + '.java';
	task clean(type: Delete) {
		//delete file('build').listFiles()
		delete 'build'
		delete ',gradle'
		//delete("libs")
		//ant.delete( dir: 'build')
		//doLast {
			//ant.delete(dir: "build")
			//ant.exec(executable: "C:\\windows\\system32\\cmd.exe",spawn:"true"){
			//	arg(value: "/c")
			//	arg(value: "rm")
			//	arg(value: "-rf")
			//	arg(value: ".build")
		//}
	//}
	}
}

	task copyApk(type: Copy) {
		from 'app/build/outputs/apk'
		into '../app'
    include '*.apk'
}

/**
 * viewSrc
 */
if (!project.tasks.findByName('viewSrc')){ 
	task viewSrc {
		doLast {
			//def java = project.name+".java";
			ant.loadfile(srcFile: 'app/src/main/java/ya/' +project.name +'/' + project.name + '.java', property: "encodedfile",encoding: "utf-8")
			println(ant.properties['encodedfile']);
		}
	}
}

/**
 * printTasks
 */
if (!project.tasks.findByName('printTasks')){ 
	task printTasks( overwrite: true) << {
 		//original  
		//project.tasks.collect { task -> println("task="+task+" dependsOn="+task.dependsOn) }
		project.tasks.collect { task -> println(task) }
	}
}	
	
/**
 * open_src_in_fd
 */
if (!project.tasks.findByName('open_src_in_fd')){ 
	task open_src_in_fd {
		def srcFile = 'app/src/main/java/ya/' +project.name +'/' + project.name + '.java';
		doLast {
			ant.exec(executable: "F:\\VCSharp\\Flashdevelop5.1.1-LL\\FlashDevelop\\Bin\\Debug\\FlashDevelop.exe",spawn:"true"){
				arg(value: "-reuse")
				arg(value: "${srcFile}")
			}
		}
	}
}

/**
 * sakura
 */
if (!project.tasks.findByName('sakura')){ 
	def srcFile = 'app/src/main/java/ya/' +project.name +'/' + project.name + '.java';
	task sakura {
		doLast {
			ant.exec(executable: "C:\\Program Files (x86)\\sakura\\sakura.exe",spawn:"true"){
				arg(value: "${srcFile}")
			}
		}
	}
}

/**
 * studio
 */
if (!project.tasks.findByName('studio')){ 
	task studio {
		doLast {
			ant.exec(executable: "C:\\Program Files\\Android\\Android Studio\\bin\\studio64.exe",
				dir: "C:\\Program Files\\Android\\Android Studio\\bin",
				spawn:"true"){
					arg(value: "${projectDir}")
			}
		}
	}
}
	
/**
 * listAVD
 */
if (!project.tasks.findByName('listAVD')){ 
	task listAVD {
		doLast {
			 //"C:\Users\˜a•F\AppData\Local\Android\sdk\tools\bin\avdmanager" list avd
			ant.exec(executable: "C:\\androidstudio\\tools\\bin\\avdmanager.bat",
				dir: "C:\\androidstudio\\tools",
				//outputproperty:"output",
				//spawn:"true"){
				outputproperty:"output"){
					arg(value: "list")
					arg(value: "avd")
			}
			//println ant.properties.output; //‚±‚ê‚Å‚àOK
			println ant.properties['output'];
		}
	}
}


/**
 * listPackages
 * adb shell pm list packages
 * [ant:exec] Result: 127
 * system/bin/sh: list: not found
 */
if (!project.tasks.findByName('listPackages')){ 
	task listPackages {
		doLast {
			ant.exec(executable: "C:/AndroidStudio/platform-tools/adb.exe",
				dir: 'C:/AndroidStudio/tools',
				//resultproperty: "App.state",
				outputproperty:"output"){
				arg(value: "shell")
				arg(value: "list")
				arg(value: "packages")
			}
			//println ant.properties.output; //‚±‚ê‚Å‚àOK
			println ant.properties['output'];
		}
	}
}

/**
 * runAVD
 */
if (!project.tasks.findByName('runAVD')){ 
	task runAVD {
		doFirst {
			def avd = "3.7_FWVGA_slider_API_25"
			ant.exec(executable: "C:/AndroidStudio/tools/emulator.exe",
				dir: 'C:/AndroidStudio/tools',
				//resultproperty: "App.state",
				spawn:"true"
			){
				arg(value: """-avd""")
				arg(value: "${avd}")
			}
		}
	}
}

/*
 * install
 */
if (!project.tasks.findByName('install')){ 
	task install {
		doLast {
			ant.exec(executable: "C:/AndroidStudio/platform-tools/adb.exe",
				//dir: 'C:/AndroidStudio/platform-tools',
				//resultproperty: "App.state",
				spawn:"true"
			){
				arg(value: "installDebug")
				arg(value: "app/build/outputs/apk/app-debug.apk")
			}			
		}
	}
}

/**
 * runApp
 */
if (!project.tasks.findByName('runApp')){ 
	//task runApp(dependsOn: "runAVD") {
	task runApp {
		doLast {
			//project.tasks['runAVD'].execute();
			//https://stackoverflow.com/questions/6613889/how-to-start-an-android-application-from-the-command-line
			//adb shell am start -n com.package.name/com.package.name.ActivityName
			def packageName = "ya."+ project.name;
			def mainActivity = project.name;
			ant.exec(executable: "C:/AndroidStudio/platform-tools/adb.exe",
			dir: 'C:/AndroidStudio/platform-tools',
			spawn:"true"){
				arg(value: "shell")
				arg(value: "am")
				arg(value: "start")
				arg(value: """-n""")
				//arg(value: "ya."+ project.name +"/"+  "ya."+ project.name + "." + project.name)
				arg(value: packageName + "/"+ packageName + "." + mainActivity)
			}
		}		
	}
}

/**
 * startGrails
 */
if (!project.tasks.findByName('startGrails')){ 
	task startGrails(type: ExecWait) {
   	command "C:\\AndroidStudio\\tools\\emulator.exe -avd 3.7_FWVGA_slider_API_25"
   	ready 'Server running.'
   	directory 'C:/AndroidStudio/tools'
	}	
}	
	
/**
 * task_test
 */
if (!project.tasks.findByName('task_test')){ 
	task task_test {
		doLast {
			println(projectDir)
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////
// End of Additional tasks

/**
 * ExecWait 
 * startGrails‚ÅŽg—p
 */
class ExecWait extends DefaultTask {
	String command
	String ready
	String directory

	@TaskAction
	def spawnProcess() {
    ProcessBuilder builder = new ProcessBuilder(command.split(' '))
    builder.redirectErrorStream(true)
    builder.directory(new File(directory))
    Process process = builder.start()

    InputStream stdout = process.getInputStream()
    BufferedReader reader = new BufferedReader(new InputStreamReader(stdout))

    def line = ""
    while ((line = reader.readLine()) != null) {
        println line
        if (line.contains(ready)) {
            println "$command is ready"
            break;
        }
    }
	}
}


