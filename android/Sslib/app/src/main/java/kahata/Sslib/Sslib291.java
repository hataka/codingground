// * -*- mode: java -*-  Time-stamp: <08/03/03(月) 16:50:25 hata>
/*================================================================
 * プログラム名: Sslib291.java
 * 作成日: Sun Feb 10 15:18:42 2002
 * $Id: sslib291.c,v 1.4 2002/02/24 07:23:28 k.hata Exp k.hata $
 * To compile:
 * To run:
 * 説明: 
 *================================================================*/
/*
 *----------------------------------------------------------------------------
 * ★ 科学技術計算サブルーチンライブラリー
 *    p.127 2.9.1 関数近似・最小自乗近似（ＬＳＴＳＱ）
 *
 *   機能        xを独立変数、yを従属変数とする、n個の点(xi,yi; i=1,2,...,n)
 *               が与えられたとき、最小自乗法によりm次の多項式で近似し、その
 *               多項式の係数を求める。
 *        
 *   呼出方法    lstsq(x(), y() ,n, mp1, c(), ier)
 *
 *   引き数
 *           入力
 *             x(),y()   :x(n),y(n)なる実配列名で、n個の点(x1,y1),(x2,y2),...
 *                        (xn,yn)を与える。
 *               n       :データ数を整定数か整変数名で与える。
 *               mp1     :(近似したい多項式の次数)+1を正定数か正変数名で与える
 *                         11≧mp1≧2, n≧mp1
 *           出力
 *               c       :c(mp1)なる実配列名で、近似した多項式の係数が得られる
 *                        得られる順序は、多項式の形で表すと、
 *                         y=c(mp1)x^(mp1-1) + c(mp1-1)x^(mp1-2) +........ +
 *                           c(2)x + c(1)
 *               ier     :整変数名で、エラーフラグである
 *                           0   :エラーなし
 *                           999 :mp1>nか、mp1<2か、mp1>11のいずれかである
 *
 *   スレーブサブルーチン: なし
 *----------------------------------------------------------------------------
 */

package kahata.Sslib;

import java.lang.String;
//import java.math.*;

class Sslib291 extends Aproximation{
	public  String output() {
		int n = 8;
		int mp1 = 4;

		int i,j;
		double x[]={ -3.0,-2.0,-1.0, 0.0, 1.0, 2.0, 3.0, 4.0},
				 y[]={ -58.0,-26.0,-10.0,-4.0,-2.0,2.0,14.0,40.0};
		double[]	c = new double[4];
		double[]    c1 = new double[4];

		// 文字列変数の宣言
		String rs;

		rs  =  String.format("\n%40s\n","★ 科学技術計算サブルーチンライブラリー（Java）");
		rs +=  String.format("                     2.9.1 最小自乗近似（ＬＳＴＳＱ）\n\n");
		rs +=  String.format("                y = (1.0)*x^3 + (-2)*x^2 + (3.0)*x + (-4.0)\n");

		lstsq(x, y, n, mp1, c);

		for(i=0; i<mp1; i++){
				j = 3 - i;
				c1[j] = c[i];
		}
		rs +=  String.format("         y = ");
		for(i=0; i<mp1; i++)
			rs +=  String.format(" + (% 5.2f)*x^%d",c1[i], 3-i);
		rs +=  String.format("\n\n");
		return rs;
	}
}
