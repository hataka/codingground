<?xml version="1.0"  encoding="UTF-8"?>
<project name="cs025_3" default="build" basedir=".">
    <property environment="env" />
    <property name="name" value="cs025_3"/>
    <property name="target" value="cs025_3"/>
    <property name="exe" value="${target}.exe"/>
    <property name="source" value="main.cs"/>
    <property name="compiler" value="C:\Program Files (x86)\Microsoft Visual Studio 14.0\Common7\IDE\devenv.exe"/>
    <property name="csproj" value="${target}.csproj" />
    <property name="doxygen" value="C:/Program Files/doxygen/bin/doxygen.exe" />
    <property name="doxyfile" value="F:/WisdomSoft/framework/system/msnet/Doxyfile" />
    <property name="script" value="F:/Programs/csscript/cscs.exe" />
  
  <target name="build">
  <!--
    <exec executable="cmd" spawn="false">
      <arg value="/k" />
      <arg value="${compiler}"/>
      <arg value="${basedir}/${csproj}" />
      <arg value="/rebuild" />
    </exec>
    
http://d.hatena.ne.jp/cigi/20121117/p2
Antでファイルの存在チェックAdd Star
Java
available タスクで存在チェック。
target の if 属性で分岐。
<project name="file.exist.sample" default="main">

  <target name="main">
    <available file="hogehoge.txt" property="have.resources" />
    <antcall target="file-is-existing" />
  </target>

  <target name="file-is-existing" if="have.resources">
    <echo message="File is existing"/>
  </target>
</project>

http://www.techscore.com/tech/Java/ApacheJakarta/Ant/3/
ワイルドカード	説明
?	任意の１文字にマッチします。
*	０文字以上の任意の文字列にマッチします。
**	ファイルのディレクトリ構造において、
任意の深さのあらゆるディレクトリやファイル名にマッチします。
「?」と「*」はUnixのシェルと同じように機能します。例えば、「Test??.*」というパタンを例として考えてみると、次のような名前にマッチします。

http://ant-contrib.sourceforge.net/tasks/tasks/if.html
<if>
 <equals arg1="${foo}" arg2="bar" />
 <then>
   <echo message="The value of property foo is bar" />
 </then>
 <else>
   <echo message="The value of property foo is not bar" />
 </else>
</if>

<if>
 <equals arg1="${foo}" arg2="bar" />
 <then>
   <echo message="The value of property foo is 'bar'" />
 </then>

 <elseif>
  <equals arg1="${foo}" arg2="foo" />
  <then>
   <echo message="The value of property foo is 'foo'" />
  </then>
 </elseif>


 <else>
   <echo message="The value of property foo is not 'foo' or 'bar'" />
 </else>
</if>

http://d.hatena.ne.jp/cigi/20121117/p2

available タスクで存在チェック。
target の if 属性で分岐。
<?xml version="1.0" encoding="Shift_JIS" ?>

<project name="file.exist.sample" default="main">

  <target name="main">
    <available file="hogehoge.txt" property="have.resources" />
    <antcall target="file-is-existing" />
  </target>

  <target name="file-is-existing" if="have.resources">
    <echo message="File is existing"/>
  </target>

</project>

 リソースディレクトリが存在すれば、プロパティ:have.resourcesは真 
<condition property="have.resources">
  <available file="${res.dir}" />
</condition>
 ターゲット:prepare-resourceは、プロパティ:have.resourcesが
真の場合実行される 
<target name="prepare-resource" depends="prepare" if="have.resources">
 以下、ビルド用のリソースディレクトリを作って、リソースをコピー 
  <mkdir dir="${build.res}" />
  <native2ascii encoding="UTF-8" src="${res.dir}" dest="${build.res}"
                includes="**/*.properties.utf8" ext="" />
  <copy todir="${build.res}">
    <fileset dir="${res.dir}" excludes="**/*.properties.*, **/*.bak" />
  </copy>
</target>
...省略...
 ターゲット:compileで、ターゲット:prepare-resourceは呼び出されるが、
  実行されるされるかどうかはプロパティ:have.resourcesの値による
<target name="compile" depends="prepare-src, prepare-resource">
  <javac srcdir="${build.src}"
         destdir="${build.dest}"
         encoding="${compile.encoding}"
         debug="${compile.debug}"
         optimize="${compile.optimize}"
         source="${compile.source}"
         deprecation="${compile.deprecation}"
         classpathref="project.class.path"
  />
</target>

一つのファイルをディレクトリにコピー

  <copy file="myfile.txt" todir="../some/other/dir"/>


    -->


<!--    <exec executable="${basedir}/build.bat" /> -->



    <exec executable="cmd" spawn="false">
      <arg value="/k" />
      <arg value="${compiler}"/>
      <arg value="${basedir}/${csproj}" />
      <arg value="/rebuild" />
    </exec>
    <!--
    <available file="${basedir}/bin/Release/${exe}" property="have.release" />
	-->
    <copy file="${basedir}/bin/Release/${exe}" todir="${basedir}" failonerror="false" />
    <copy file="${basedir}/bin/Debug/${exe}" todir="${basedir}" failonerror="false" />

  </target>

  <target name="run">
    <exec executable="${basedir}/${exe}" />
  </target>

  <target name="runscript">
    <exec executable="cmd.exe" >
      <arg value="/k" />
      <arg value="${script}" />
      <arg value="${basedir}/${source}" />
    </exec>
  </target>


  <target name="clean">
 <!--   
    <exec executable="${basedir}/build.bat" >
      <arg value="clean" />
    </exec>
 --> 
  <!-- http://www.ne.jp/asahi/hishidama/home/tech/ant/tag/delete.html -->
    <delete dir="bin" />
    <delete dir="obj/Debug" />
    <delete>
      <fileset dir="." includes="*.user"/>
      <fileset dir="." includes="*.suo"/>
    </delete>
  </target>
  <target name="clear">
<!--
    <exec executable="${basedir}/build.bat" >
      <arg value="clean" />
    </exec>
-->
    <delete dir="bin" />
    <delete dir="obj/Debug" />
    <delete dir="doxygen" />
    <delete>
      <fileset dir="." includes="*.user"/>
      <fileset dir="." includes="*.suo"/>
      <fileset dir="." includes="*.exe"/>
      <fileset dir="." includes="*.class"/>
      <fileset dir="." includes="*.swf"/>
    </delete>
  </target>

  <target name="doxygen">
    <exec executable="cmd.exe" >
      <arg value="/k" />
      <arg value="${doxygen}" />
      <arg value="${doxyfile}" />
    </exec>
  </target>



  <!-- =================================================================== -->
  <!-- Help on usage                                                       -->
  <!-- =================================================================== -->
  <target name="usage">
    <echo message="" />
    <echo message="" />
    <echo message="${name} Build file" />
    <echo message="-------------------------------------------------------------" />
    <echo message="" />
    <echo message=" available targets are:" />
    <echo message="" />
    <echo message="   build     - compiles the source code (default)" />
    <echo message="   run       - execute the exsample" />
    <echo message="   runscript - run script of the exsample" />
    <!--
    <echo message="   package   - generates the ${name}.jar file" />
    -->
    <echo message="   doxygen   - generates the doxygen documentation" />
    <echo message="   clean     - cleans up the directory" />
    <echo message="   clear     - delete all build files" />
    <echo message="" />
    <echo message=" See the comments inside the build.xml file for more details." />
    <echo message="-------------------------------------------------------------" />
    <echo message="" />
    <echo message="" />
  </target>

</project>
