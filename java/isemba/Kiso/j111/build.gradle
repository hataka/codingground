// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'application'
apply plugin: 'eclipse'
apply plugin: 'groovy'

/////////////////////////////////////////////////////////////////////////////
// Properties
defaultTasks 'run'
group = 'isemba'
version = '1.0-SNAPSHOT'
description = "j111"

//sourceSets.main.java.srcDirs   = ["$projectDir"]
//sourceSets.main.groovy.srcDirs = ["$projectDir"]
/*
compileJava {
  options.encoding = 'utf-8'
  copy {
    from 'classes/main'
    into '.'
    include '** / *.class' //修正必要
    //include '** / *.jsp' //修正必要
    //exclude { details -> details.file.name.endsWith('.html') &&
    //                     details.file.text.contains('staging') }	
  }
}
*/
/*
sourceSets {
	main {
		java {
			//srcDir 'src/java'
    	//srcDirs = ["$projectDir/src/java"]
    	srcDirs = ["$projectDir"]
		}
		
		resources {
			//srcDir 'src/resources'
			srcDirs ["$projectDir/resources"]
		}
		
		groovy {
			srcDirs = ["$projectDir/src/groovy"]
			//srcDirs = ["$projectDir"]
  	}
	}
}
*/
//buildDir = "$projectDir"
buildDir = 'target'
//buildDir = "$projectDir"
def user_home = System.getenv()['USERPROFILE']+"\\.maven"
// Define the main class for the application
mainClassName = 'isemba.j111'

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}
//http://www.my-notebook.net/82f61937-bc91-4323-8380-a09c8dede37f.html
ant.env = ant.property(environment:'env')
ext.env = System.getenv()
ant.importBuild('build.xml') {
  antTaskName -> "ant.${antTaskName}".toString()
}

repositories {
		jcenter()
     maven { url "http://repo.maven.apache.org/maven2" }
}
dependencies {
	compile 'com.google.guava:guava:21.0'
	compile 'org.codehaus.groovy:groovy-all:2.4.10'
  //compile 'org.codehaus.groovy:groovy-all:2.2.1'
  //groovy group: localGroovy()  
	//groovy group: 'org.codehaus.groovy', name: 'groovy', version: '2.0.1'
 	//compile files('C:/eclipse461/workspace/CommonLibrary/CommonLibrary.jar')
    testCompile group: 'junit', name: 'junit', version:'3.8.1'
}

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		//classpath files('F:/java/lib/swt.jar')
		//classpath files('C:/eclipse461/workspace/CommonLibrary/CommonLibrary.jar')
	}
}
/////////////////////////////////////////////////////////////////////////////
// Tasks
task create_run_jar(type: Jar, dependsOn: jar)  {
  description 'Create swt Executable Jar in rootDir'
	destinationDir = file("$rootDir")
	exclude "META-INF/*.SF"  
	archiveName = "${rootProject.name}.jar"
	manifest {
		attributes 'Main-Class' : mainClassName
	}
  from configurations.compile.collect {it.isDirectory() ? it : zipTree(it)}
  from "$buildDir/classes/main"
  from "$buildDir/resources/main"
	from zipTree('F:/java/lib/swt.jar')
}

//task runJar(dependsOn:[jar]){ //自動起動する
task runJar {
	description 'Run Executable Jar  at root'
	doLast {
		//println(jar.archivePath)
		ant.java(jar:"$rootDir/${rootProject.name}.jar",fork:true)
	}
}

task listPath  {
	description 'src配下の*.javaファイルをリストアップします'
  doLast{
		def path = ant.path {
			fileset(dir: 'src', includes: '**/*.java')
		}
		path.list().each {
			println it
		}
	}
}

task echo_properties {
	description '組込みプロパティを リストアップします'
	doLast {
		println 'Hello, Gradle!'
		println "|rootDir		  |$rootDir|"  // $rootDir の代わりに $project.rootDir でも OK
		println "|project.name	 |$project.name|"  // $rootDir の代わりに $project.rootDir でも OK
  	println "|projectDir	   |$projectDir|"
  	println "|buildDir		 |$buildDir|"
  	println "|gradleHomeDir	|$gradle.gradleHomeDir|"
  	println "|gradleUserHomeDir|$gradle.gradleUserHomeDir|"
  	println "|rootProject.name |$rootProject.name|"
  	println "|description	  |$description|"
  	println "|version		  |$version|"
  	//println "|userhome		 |$user_home|"
	}
}
/////////////////////////////////////////////////////////////////////////////
// Embed Script
import java.io.*;

task runScript {
  description = "基礎（１）：画面への出力"
  doLast {
//  -*- mode: java -*-  Time-stamp: <2009-06-16 20:36:04 kahata>
/*================================================================
 * title: 基礎（２）：変数、型
 * file: j111.java
 * created : Time-stamp: <09/06/16(火) 20:27:01 hata>
 * $Id$
 * To compile: javac j111.java
 * To run:     java  j111
 *  http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/java.shtml
 *  http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/KISO/j111.htm
 * description: JavaConsoleApplication 
 *================================================================*/
////////////////////////////////////////////////////////////////////
//  << j111.java >>
//
//  基礎（２）：変数、型
//
//　●変数
//　　変数はデータを格納しておく箱と考えられる。箱を作ったり（宣言という）、
//　　データを格納したり（代入という）、箱に入っているデータを見たり
//　　（参照という）することができる。
//
//　●型
//　　変数に格納するデータの種類のことを型といい、整数型、文字型、論理型などが
//　　ある。
//　　　・整数型：byte,short,int,long
//　　　・浮動小数点数型：float,double
//　　　・文字型：char
//    　・論理型：boolean
//　　これら８種類の型を基本型という。
//
//    　　型　　サイズ　　　値
//  　  byte     8bit       -128 ～ +127
//     short    16bit       -32768 ～ +32767
//       int    32bit       -2147483648 ～ +2147483647
//      long    64bit       -9223372036854775808 ～ +9223372036854775807
//     float    32bit       -3.40E+38 ～ +3.40E+38
//    double    64bit       -1.79E+308 ～ +1.79E+308 
//      char    16bit       0 ～ 65535
//    boolean    1bit       true,false
//
//　・char型の１文字を表すときは、一重引用符(')で囲む。
//　　たとえば、'a', '1', '漢'。
//
//　●キャスト演算子
//　　(型名)式 と書くと、式の型をかっこ内で指定した型に変換する
//    大きいサイズの型の値を小さいサイズの型の変数に代入するときキャスト演算子
//　　を使う必要がある。
//
//　●文字列の連結
//　　文字列の連結には、演算子＋を使う。
//　　
////////////////////////////////////////////////////////////////////
    // 変数の宣言と初期化。
    byte    a1 = 1; 
    short   a2 = 12;
    int     a3 = 123;
    long    a4 = 1234L; // 整数にLをつけるとlong型になる。
    float   b1 = (float)1.23; // 1.23はdouble型として処理される。
                              // float型として処理するには、明示的な
                              // 型変換が必要。この操作をキャストという。
    double  b2 = 1.234;
    def    c1 = '漢'; 
    def    c2 = 'a'; 
    boolean c3 = true;

    // 変数の出力。
    System.out.println("byte型    a1 = " + a1);    
    System.out.println("short型   a2 = " + a2); 
    System.out.println("int型     a3 = " + a3); 
    System.out.println("long型    a4 = " + a4);
    System.out.println("float型   b1 = " + b1);
    System.out.println("double型  b2 = " + b2);   
    System.out.println("char型    c1 = " + c1);   
    System.out.println("char型    c2 = " + c2);   
    System.out.println("boolean型 c3 = " + c3);   
  }
}
	
