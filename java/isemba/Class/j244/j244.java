// -*- mode: java -*- Time-stamp: <09/05/19 16:28:13 kazuhiko>
/*====================================================================
 * name: j244.java 
 * created : Time-stamp: <09/06/28(日) 16:46:42 hata>
 * $Id$
 * Programmed by kahata
 * To compile:
 * To run:
 * links: http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/java.shtml
 *   http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/CLASS/j244.htm
 * description: Java プログラミング(基礎と応用)  仙波一郎
 * ====================================================================*/
////////////////////////////////////////////////////////////////////////////////
//  << j244.java >>
//
//  クラス（４）：継承（オーバーライド、多態性）
//
//  　通常、親クラスの変数で親クラスのオブジェクトを扱い、子クラスの変数で
//　　子クラスのオブジェクトを扱う。
//    ところが、子クラスのオブジェクトは親クラスの変数としても扱うことができる。
//
//　　　　Child objc = new Child();
//        Parent objp = objc;
//
//　　すなわち、同じオブジェクトが、変数objcからChildクラスと見られ、変数objp
//　　からParentクラスと見られる。
//　　このことを、オブジェクトの多態性（ポリモーフィズム、Polymorphism）という。
//　　複数の形態をもつという意味である。
//
//　●変数objpの性質
//
//　　(性質１) 変数objpから子クラスで新たに定義されたメンバ(フィールド、メソッド)
//             にアクセスすることはできない。
//　　(性質２) 親クラスと子クラスが同じフィールドaをもつとき、objp.aで親クラスの
//　　　       フィールドが参照される。
//　　(性質３) 親クラスで定義されたメソッドm()が、子クラスでオーバーライドされて
//　　       　いるとき、objp.m()で呼び出されるのは、親クラスで定義された
//             メソッドではなく、子クラスでオーバーライドされたメソッドになる。
//
///////////////////////////////////////////////////////////////////////////////
