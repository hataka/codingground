// -*- mode: java -*- Time-stamp: <2009-06-29 17:24:41 kahata>
/*====================================================================
 * name: j281.java 
 * created : Time-stamp: <09/06/29(月) 17:24:17 hata>
 * $Id$
 * Programmed by kahata
 * To compile:
 * To run:
 * links: http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/java.shtml
 *   http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/CLASS/j281.htm
 * description: Java プログラミング(基礎と応用)  仙波一郎
 * ====================================================================*/
////////////////////////////////////////////////////////////////////////////////
//  << j281.java >>
//
//  クラス（８）：パッケージ（概説）
//
//　●パッケージ
//
//　　新たなクラスを作成するとき、クラス名が必要になるが、すでに作成されている
//　　クラスと名前が重複する可能性がある。クラス名の重複を避けるために、
//　　クラスをグループ分けして管理できるようにパッケージが考えられた。
//　　各クラスはひとつのパッケージに属し、たとえ同じクラス名でも異なる
//　　パッケージに属していれば、異なるクラスとみなされる。
//
//　　・個々のクラスは、パッケージ名とクラス名で完全に指定できる。
//      これを完全限定名といい、パッケージ名とクラス名をドット(.)でつなぐ。
//
//          パッケージ名.クラス名
//
//　　・パッケージ名は、名前をドット(.)でつなぐ。
//
//          名前１.名前２.名前３.・・・
//
//　　　（注意）パッケージaとパッケージa.bの場合、後者を前者のサブパッケージと
//　　　　　　　呼ぶが、クラスの集合として共通部分はない。
//
//　　・異なるパッケージのクラスにアクセスする場合、アクセスされるクラスに
//　　　public指定が必要となる。すなわち、public指定のないクラスは、パッケージ
//　　　内からはアクセス自由だが、パッケージ外からはアクセスされない。
//
//　　　　　public class クラス名 {
//　　　　　　・・・
//　　　　　}
//
//　　・パッケージは、機能が関連するクラスをグループ化し、プログラマが必要とする
//　　　クラスを探しやすくする。
//　　　クラス階層とは、関係がないことに注意。したがって、クラス階層では離れて
//　　　いるクラスが同じパッケージに集められていてもよい。
//
//　●Java API(Application Programming Interface)は、プログラマが開発する
//　　プログラムで利用することが許されているクラスをまとめたものである。
//　　いくつかのパッケージに分類されている。
//
//　　パッケージ名　　内容
//　　java.lang       Java言語基本クラス（System,String,Threadなど）
//　　java.awt        グラフィックス関連のクラス
//　　java.applet     アプレット関連のクラス
//
////////////////////////////////////////////////////////////////////////////////
