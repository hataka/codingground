/*
<!--====================================================================-->
<!-- << g132.htm >>                                                     -->
<!--                                                                    -->
<!--  JAVAプログラミング　　　　　　　　　　　　　　　　　　　　　　　  -->
<!--                                                                    -->
<!--====================================================================-->

<html>
<head>
  <title>JAVAプログラミング</title>
</head>

<body bgcolor="white" text="black">

<pre>
*/
////////////////////////////////////////////////////////////////////////////////
//  << g132.java >>
//
//  ＧＵＩ（３）：イベント処理（概説）
//
//  ●イベント処理
//
//    ユーザがボタンをクリックすると、イベントという情報としてまとめられる。
//　　このイベントは、イベントリスナに渡され処理される。
//　　このような処理形式をイベント処理という。
//
//　　・イベントの発生源となるコンポーネントをイベントソースという。
//　　・イベントリスナは、リスナーインターフェースを実装しているクラスで、
//　　　受理したイベントを処理するメソッドが記述される。
//　　・イベント処理に関連するクラスは、java.awt.eventパッケージに存在する。
//
//　●イベント処理の仕組み
//
//　　(1)イベントソースからイベントが発生する。
//　　   イベントには、その種類ごとに対応するクラス(ボタン操作から発生する
//       イベントにはActionEventクラスがある)が定義されており、イベントが
//       発生すると、そのオブジェクトが作られる。
//　　(2)イベントのオブジェクトは、イベントリスナのオブジェクトに送られ
//       処理される。
//       あらかじめ、イベントリスナのオブジェクトをイベントソースのオブジェクト
//       に登録しておく必要がある。
//
//　　・イベントリスナは、イベントに対応するリスナーインターフェースを実装する
//　　　ことが要求される。例えば、ボタンのイベントActionEventを処理する
//　　　イベントリスナは、ActionListenerというインターフェース中のメソッド
//　　　(actionPerformed)に処理手順を記述することになる
//
//　●イベント処理プログラムの書き方
//
//　　次の２点を記述することが必要。
//　（手順１）リスナーインターフェースを実装するリスナクラスを定義する。
//　（手順２）イベントソースのオブジェクトに、イベントリスナのオブジェクトを
//　　　　　　登録する
//　
//　　　　　　イベントソースのオブジェクト.addEventListener(イベントリスナの
//　　　　　　　　　　　　　　　　　　　　　　　　　　　　　オブジェクト)
//
////////////////////////////////////////////////////////////////////////////////
/*
</pre>

</body>
</html>
*/
