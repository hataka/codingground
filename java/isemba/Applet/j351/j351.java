// -*- mode: java -*- Time-stamp: <09/05/19 16:28:13 kazuhiko>
/*====================================================================
 * name: j351.java 
 * created : Time-stamp: <09/07/01(水) 07:14:12 hata>
 * $Id$
 * Programmed by kahata
 * To compile:
 * To run:
 * links: http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/java.shtml
 *   http://jubilo.cis.ibaraki.ac.jp/~isemba/PROGRAM/JAVA/APPLET/j351.htm
 * description: Java プログラミング(基礎と応用)  仙波一郎
 * ====================================================================*/
////////////////////////////////////////////////////////////////////////////////
//  << j351.java >>
//
//  アプレット（５）：スレッド（概説）
//  
//　●スレッド
//
//　　・プログラムの実行の流れを、スレッドという。必要に応じて新しいスレッドを
//　　　作成し、複数のスレッドを並行して実行できる。
//　　　たとえば、アニメーションを表示しながら音を再生したり、一定時間ごとに
//　　　表示を変化させたりすることができる。
//
//　　・アプレット内でスレッドを利用するには、Runnableインターフェースを
//　　　 実装する。Runnableインターフェースで定義されているrunメソッドを
//　　　オーバーライドして、スレッド化する処理を記述する。
//
//　　・スレッド処理はThreadクラスのオブジェクトを通して行われる。
//   　 スレッドオブジェクトの作成はThreadコンストラクタで行い、実行開始は
//    　Threadクラスのstartメソッド呼び出す。そうすると、runメソッドに記述された
//    　処理が独立したスレッドとして実行される。スレッドの停止は、stopメソッドを
//　　　呼び出して行う。
//
//　●Runnableインターフェース
//
//　　このインターフェースは、Threadクラスで必要なrunメソッドを定義している。
//　　このインターフェースを実装したクラスはスレッドをもつことができる。
//
//  ●クラスをスレッドとして実行するための書き方 
//
//      public class クラス名 extends Applet implements Runnable {       
//        Thread th;                                                     
//        // スレッドの開始。                                            
//        public void start() {                                          
//          th = new Thread(this); // Threadオブジェクトの作成。       
//                                 // thisはアプレット自身を指す。       
//                                 // これによりアプレットがスレッド     
//                                 // として扱われる。                   
//          th.start(); // スレッドの実行開始。                          
//        }                                                              
//        // スレッドの処理。                                              
//        public void run() {                                            
//          処理の本体                                                   
//        }                                                              
//        // スレッドの停止。                                            
//        public void stop() {                                           
//          th = null; // THreadオブジェクトの消去。スレッドの停止。   
//        }                                                              
//      }                                                                
//
////////////////////////////////////////////////////////////////////////////////
/*
</pre>

</body>
</html>
*/
